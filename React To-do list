src/index.js

import React from "react";
import { createRoot } from "react-dom/client";
import App from "./App";
import "./index.css";

const root = createRoot(document.getElementById("root"));
root.render(<App />);


src/App.js

import React, { useState } from "react";
import "./App.css";

function TodoItem({ todo, onToggle, onEdit, onDelete }) {
  return (
    <div className="todo">
      <input type="checkbox" checked={todo.done} onChange={() => onToggle(todo.id)} />
      <span className={todo.done ? "done" : ""}>{todo.text}</span>
      <div className="actions">
        <button onClick={() => onEdit(todo.id)}>Edit</button>
        <button onClick={() => onDelete(todo.id)}>Delete</button>
      </div>
    </div>
  );
}

export default function App() {
  const [todos, setTodos] = useState([
    { id: 1, text: "Learn React", done: false },
    { id: 2, text: "Make a To-Do App", done: false },
  ]);
  const [text, setText] = useState("");
  const [editingId, setEditingId] = useState(null);

  function addOrUpdate(e) {
    e.preventDefault();
    if (!text.trim()) return;
    if (editingId) {
      setTodos((t) => t.map(item => item.id === editingId ? {...item, text} : item));
      setEditingId(null);
    } else {
      setTodos((t) => [...t, { id: Date.now(), text, done: false }]);
    }
    setText("");
  }

  function toggleDone(id) {
    setTodos(t => t.map(item => item.id === id ? {...item, done: !item.done} : item));
  }

  function editTodo(id) {
    const target = todos.find(t => t.id === id);
    if (target) { setText(target.text); setEditingId(id); }
  }

  function deleteTodo(id) {
    setTodos(t => t.filter(item => item.id !== id));
  }

  return (
    <div className="app">
      <h1>React To-Do List</h1>
      <form onSubmit={addOrUpdate}>
        <input value={text} onChange={e=>setText(e.target.value)} placeholder="Add a task..." />
        <button type="submit">{editingId ? "Update" : "Add"}</button>
        {editingId && <button type="button" onClick={() => { setEditingId(null); setText(""); }}>Cancel</button>}
      </form>

      <div className="list">
        {todos.length === 0 ? <p>No tasks.</p> : todos.map(t => (
          <TodoItem key={t.id} todo={t} onToggle={toggleDone} onEdit={editTodo} onDelete={deleteTodo} />
        ))}
      </div>
    </div>
  );
}


src/index.css

body{font-family: Arial, Helvetica, sans-serif;background:#f9fafb;color:#111;padding:20px}
.app{max-width:640px;margin:0 auto;background:#fff;padding:20px;border-radius:8px;box-shadow:0 6px 18px rgba(0,0,0,0.06)}
h1{text-align:center}
form{display:flex;gap:8px;margin-bottom:16px}
form input{flex:1;padding:8px;border:1px solid #ddd;border-radius:4px}
form button{padding:8px 12px;border-radius:4px;border:0;background:#0b76ff;color:#fff;cursor:pointer}
.todo{display:flex;align-items:center;gap:10px;padding:8px;border-bottom:1px solid #f0f0f0}
.todo .actions{margin-left:auto;display:flex;gap:6px}
.todo .actions button{padding:6px;border-radius:4px;border:0;background:#eee;cursor:pointer}
.done{text-decoration:line-through;color:#888}
